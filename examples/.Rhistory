labs(x="distance", y="pr[better school]")
yhat_below <- data.frame(locpoly(x=romania_below$distance, y=romania_below$ptile, bandwidth=.05, degree=1))
yhat_above <- data.frame(locpoly(x=romania_above$distance, y=romania_above$ptile, bandwidth=.05, degree=1))
ggplot() +
geom_line(data = yhat_below, aes(x = x, y = y)) +
geom_line(data = yhat_above, aes(x = x, y = y)) +
labs(x="distance", y="exit exam percentile")
# this R script analyzes data from romanian schools. the data include
# students who live in towns with two high schools. high school admissions
# are based on an entry exam. we will use the admissions cutoff to
# the town's better high school in a fuzzy regression discontinuity design.
library(haven)
romania <- read_dta("https://github.com/tvogl/econ121/raw/main/data/romania_schools.dta")
# variables in the dataset
ls(romania)
# distance = score - cutoff
# better = went to better school in town
# ptile = percentile on high school exit exam
# summarize distance to the town-specific cutoff
summary(romania$distance)
# graph of first stage relationship --> effect of being above town's cutoff on going to the better school
library(KernSmooth)
library(ggplot2)
romania_below <- subset(romania, distance < 0)
romania_above <- subset(romania, distance >= 0)
yhat_below <- data.frame(locpoly(x=romania_below$distance, y=romania_below$better, bandwidth=.2, degree=1))
yhat_above <- data.frame(locpoly(x=romania_above$distance, y=romania_above$better, bandwidth=.2, degree=1))
ggplot() +
geom_line(data = yhat_below, aes(x = x, y = y)) +
geom_line(data = yhat_above, aes(x = x, y = y)) +
labs(x="distance", y="pr[better school]")
yhat_below <- data.frame(locpoly(x=romania_below$distance, y=romania_below$ptile, bandwidth=.2, degree=1))
yhat_above <- data.frame(locpoly(x=romania_above$distance, y=romania_above$ptile, bandwidth=.2, degree=1))
ggplot() +
geom_line(data = yhat_below, aes(x = x, y = y)) +
geom_line(data = yhat_above, aes(x = x, y = y)) +
labs(x="distance", y="exit exam percentile")
library(dplyr)
library(estimatr)
romania <- mutate(romania, above=ifelse(distance>=0,1,0), aboveXdistance=above*distance)
lm_robust(better ~ above + distance + aboveXdistance, data=romania, subset=(abs(distance)<=0.2))
summary(romania$better)
lm_robust(better ~ above + distance, data=romania, subset=(abs(distance)<=0.2))
summary(romania)
lm_robust(better ~ above + distance + aboveXdistance, data=romania, subset=(abs(distance)<=0.2))
lm_robust(better ~ above + aboveXdistance, data=romania, subset=(abs(distance)<=0.2))
lm_robust(better ~ above + distance, data=romania, subset=(abs(distance)<=0.2))
lm(better ~ above + distance + aboveXdistance, data=romania, subset=(abs(distance)<=0.2))
lm_robust(better ~ above + distance + aboveXdistance, data=romania, subset=(distance>=-0.2 & distance<=0.2))
summary(lm_robust(better ~ above + distance + aboveXdistance, data=romania, subset=(abs(distance)<=0.2)))
lm_robust(better ~ above + distance + aboveXdistance, data=romania, subset=(abs(distance)<=0.2))
lm_robust(ptile ~ above + distance + aboveXdistance, data=romania, subset=(abs(distance)<=0.2))
3.95468/.6369932
ivreg(ptile ~ better + distance + aboveXdistance | above + distance + aboveXdistance, data=romania)
library(AER)
ivreg(ptile ~ better + distance + aboveXdistance | above + distance + aboveXdistance, data=romania)
model1 <- ivreg(ptile ~ better + distance + aboveXdistance | above + distance + aboveXdistance, data=romania, subset=(abs(distance)<=0.2))
summary(model1)
coeftest(model1, vcov = vcovHC(m, type="HC2"))
coeftest(model1, vcov = vcovHC(model1, type="HC2"))
coeftest(model1, vcov = vcovHC(model1, type="HC1"))
library(estimatr)
nfhs5 <- read_dta("https://github.com/tvogl/econ121/raw/main/data/nfhs5.dta")
# Part A
# A1
lm_robust(child_u1death ~ child_bord, data = nfhs5, cluster = psu_id)
help(lm_robust)
lm_robust(child_u1death ~ child_bord, data = nfhs5, clusters = psu_id)
lm_robust(child_u1death ~ child_bord, data = nfhs5, clusters = psu_id)
nfhs5 <- read_dta("https://github.com/tvogl/econ121/raw/main/data/nfhs5.dta")
library(haven)
nfhs5 <- read_dta("https://github.com/tvogl/econ121/raw/main/data/nfhs5.dta")
lm_robust(child_u1death ~ child_bord, data = nfhs5, clusters = psu_id)
summary(lm_robust(child_u1death ~ child_bord, data = nfhs5, clusters = psu_id))
model1 <- lm_robust(child_u1death ~ child_bord, data = nfhs5, clusters = psu_id)
summary(model1)
bootcov(model1,cluster=nfhs5$clustnum,B=99)
library(haven)
library(estimatr)
library(rms)
model1a <- ols(child_u1death ~ child_bord, data = nfhs5, x=TRUE, y=TRUE)
bootcov(model1,cluster=nfhs5$psu_id,B=99)
bootcov(model1a,cluster=nfhs5$psu_id,B=99)
model2 <- plm(child_u1death ~ child_bord, data = nfhs5, index = c("mom_id"), model = "within")
coeftest(model2, vcov = vcovHC(model2, cluster = "mom_id"))
library(plm)
library(lmtest)
model2 <- plm(child_u1death ~ child_bord, data = nfhs5, index = c("mom_id"), model = "within")
coeftest(model2, vcov = vcovHC(model2, cluster = "mom_id"))
coeftest(model2, vcov = vcovHC(model2, group = "mom_id"))
model3 <- plm(child_u1death ~ child_bord + child_birthyr, data = nfhs5, index = c("mom_id"), model = "within")
coeftest(model3, vcov = vcovHC(model3, group = "mom_id"))
library(dplyr)
model4 <- plm(child_u1death ~ child_bord + maleXbord + child_birthyr + maleXbirthyr + child_male
, data = nfhs5, index = c("mom_id"), model = "within")
nfhs5 %>% mutate(nfhs5, maleXbord = child_male*child_bord, maleXbirthyr = child_male*child_birthyr)
nfhs5 <- mutate(nfhs5, maleXbord = child_male*child_bord, maleXbirthyr = child_male*child_birthyr)
model4 <- plm(child_u1death ~ child_bord + maleXbord + child_birthyr + maleXbirthyr + child_male,
data = nfhs5, index = c("mom_id"), model = "within")
coeftest(model4, vcov = vcovHC(model4, group = "psu_id"))
model6 <- lm_robust(child_u1death ~ mom_rural + mom_edyrs + mom_age, data = nfhs5, clusters = psu_id)
summary(model6)
summary(glht(model6, linfct = c("(mom_rural+5*mom_edyrs+15*mom_age)-(12*mom_edyrs+40*mom_age) = 0")))
library(multcomp)
summary(glht(model6, linfct = c("(mom_rural+5*mom_edyrs+15*mom_age)-(12*mom_edyrs+40*mom_age) = 0")))
summary(glht(model6, linfct = c("mom_rural+(5-12)*mom_edyrs+(15-40)*mom_age = 0")))
summary(glht(model6, linfct = c("(Intercept) = 0")))
library(car)
deltaMethod(model6,"((Intercept)+mom_rural+5*mom_edyrs+15*mom_age)/((Intercept)+12*mom_edyrs+40*mom_age) = 0")
deltaMethod(model6,"((Intercept)+mom_rural+5*mom_edyrs+15*mom_age)/((Intercept)+12*mom_edyrs+40*mom_age) = 0",rhs=1)
summary(glht(model6, linfct = c("Intercept = 0")))
deltaMethod(model6,"(Intercept+mom_rural+5*mom_edyrs+15*mom_age)/(Intercept+12*mom_edyrs+40*mom_age) = 0",rhs=1)
deltaMethod(model6,"mom_rural/mom_edyrs = 0",rhs=1)
library(car)
deltaMethod(model6,"mom_rural/mom_edyrs = 0",rhs=1)
rm(list = ls())
nfhs_raw <- read_dta("https://github.com/tvogl/econ121/raw/main/data/nfhs4.dta")
nfhs <- nfhs_raw[which(nfhs_raw$age >= 20
& nfhs_raw$age <= 80),]
library(estimatr)
lm_robust(assets ~ age,data = nfhs,clusters = clustnum,weights=weight,se_type = "stata")
# heterogeneity between urban and rural areas
library(dplyr)
bygroup = nfhs %>% group_by(rural) %>% do(regs = lm_robust(assets ~ age,data = .,clusters = clustnum,weights = weight,se_type = "stata"))
bygroup$regs
nfhs$ageXrural <- nfhs$age * nfhs$rural
# now run the model and save the results as model1 for later
model1 <- lm_robust(assets ~ age + rural + ageXrural,data = nfhs,clusters = clustnum,weights = weight,se_type = "stata")
model1
library(multcomp)
summary(glht(model1, linfct = c("age + ageXrural = 0")))
deltaMethod(model1,"age / (age + ageXrural)",rhs=1)
rm(list = lm())
rm(list = ls())
nfhs5 <- read_dta("https://github.com/tvogl/econ121/raw/main/data/nfhs5.dta")
model1 <- lm_robust(child_u1death ~ child_bord, data = nfhs5, clusters = psu_id)
model1 <- lm_robust(child_u1death ~ child_bord, data = nfhs5, clusters = psu_id, se_type = "stata")
model2 <- plm(child_u1death ~ child_bord, data = nfhs5, index = c("mom_id"), model = "within", se_type = "stata")
model1 <- lm_robust(child_u1death ~ child_bord, data = nfhs5, clusters = psu_id, se_type = "stata")
summary(model1)
deltaMethod(model1,"child_bord/Intercept = 0",rhs=1)
deltaMethod(model1,"1/child_bord = 0",rhs=1)
rm(list = ls())
library(haven)
nfhs_raw <- read_dta("https://github.com/tvogl/econ121/raw/main/data/nfhs4.dta")
# subset data to include only 20-80 year olds
nfhs <- nfhs_raw[which(nfhs_raw$age >= 20
& nfhs_raw$age <= 80),]
# we left off with estimates of a single slope,
# as a summary of a population pattern. recall
# that we used sampling weights, to ensure that
# the estimates are representative of the
# estimate we would obtain for the full population.
library(estimatr)
lm_robust(assets ~ age,data = nfhs,clusters = clustnum,weights=weight,se_type = "stata")
model1 <- lm_robust(assets ~ age + rural + ageXrural,data = nfhs,clusters = clustnum,weights = weight,se_type = "stata")
model1
nfhs$ageXrural <- nfhs$age * nfhs$rural
# now run the model and save the results as model1 for later
model1 <- lm_robust(assets ~ age + rural + ageXrural,data = nfhs,clusters = clustnum,weights = weight,se_type = "stata")
model1
deltaMethod(model1,"age / (age + ageXrural)",rhs=1)
deltaMethod(model1,"1 / (age)",rhs=1)
rm(list=ls())
library(haven)
library(estimatr)
library(rms)
library(plm)
library(lmtest)
library(dplyr)
library(multcomp)
library(car)
# Load data
nfhs5 <- read_dta("https://github.com/tvogl/econ121/raw/main/data/nfhs5.dta")
model6 <- lm_robust(child_u1death ~ mom_rural + mom_edyrs + mom_age, data = nfhs5, clusters = psu_id, se_type = "stata")
summary(model6)
summary(glht(model6, linfct = c("mom_rural+(5-12)*mom_edyrs+(15-40)*mom_age = 0")))
deltaMethod(model6,"mom_rural / mom_age = 0",rhs=1)
deltaMethod(model6,"mom_rural/mom_edyrs",rhs=1)
deltaMethod(model6,"mom_rural/mom_edyrs",rhs=0)
deltaMethod(model6,"mom_rural/mom_edyrs")
deltaMethod(model6,"(Intercept+mom_rural+5*mom_edyrs+15*mom_age)/(Intercept+12*mom_edyrs+40*mom_age)")
deltaMethod(model6,"(Intercept+mom_rural+5*mom_edyrs+15*mom_age)/(Intercept+12*mom_edyrs+40*mom_age)")
deltaMethod(model6,"(Intercept+mom_rural+5*mom_edyrs+15*mom_age)/(Intercept+12*mom_edyrs+40*mom_age)")
deltaMethod(model6,"(Intercept+mom_rural+5*mom_edyrs+15*mom_age)/(Intercept+12*mom_edyrs+40*mom_age)")
lm_robust(child_u1death ~ mom_rural + mom_edyrs + mom_age, data = nfhs5, clusters = psu_id, se_type = "stata")
lm_robust(child_u1death ~ mom_rural + mom_edyrs + mom_age, data = nfhs5, clusters = psu_id)
nfhs5 <- subset(nfhs5, child_bord==1)
summary(nfhs5$child_bord)
model7 <- lm_robust(mom_working ~ mom_kids, data = nfhs5, clusters = psu_id, se_type = "stata")
summary(model7)
model8 <- lm_robust(mom_working ~ child_male, data = nfhs5, clusters = psu_id, se_type = "stata")
summary(model8)
model8 <- lm_robust(mom_kids ~ child_male, data = nfhs5, clusters = psu_id, se_type = "stata")
summary(model8)
library(AER)
help("ivreg")
ivreg(mom_working ~ mom_kids | child_male, data = nfhs5)
model10 <- ivreg(mom_working ~ mom_kids | child_male, data = nfhs5)
coeftest(model10, vcov = vcovHC(model10, group = "psu_id"))
summary(model10)
coeftest(model10, vcov = vcovHC(model10, group = "psu_id"))
library(lmtest)
coeftest(model10, vcov = vcovHC(model10, group = "psu_id"))
library(sandwich)
coeftest(model10, vcov = vcovHC(model10, group = "psu_id"))
model10 <- ivreg(mom_working ~ mom_kids | child_male, data = nfhs5)
summary(model10)
coeftest(model10, vcov = vcovHC(model10, group = "psu_id"))
coeftest(model8, vcov = vcovHC(model8, group = "psu_id"))
model8 <- lm_robust(mom_kids ~ child_male, data = nfhs5, clusters = psu_id, se_type = "stata")
summary(model8)
coeftest(model8, vcov = vcovHC(model8, group = "psu_id"))
detach(package:AER, unload=TRUE)
library(lmtest)
coeftest(model8, vcov = vcovHC(model8, group = "psu_id"))
nfhs5 <- read_dta("https://github.com/tvogl/econ121/raw/main/data/nfhs5.dta")
model2 <- plm(child_u1death ~ child_bord, data = nfhs5, index = c("mom_id"), model = "within")
coeftest(model2, vcov = vcovHC(model2, group = "psu_id"))
nfhs5 <- subset(nfhs5, child_bord==1)
model9 <- lm_robust(mom_working ~ mom_kids, data = nfhs5, clusters = psu_id, se_type = "stata")
summary(model9)
model10 <- ivreg(mom_working ~ mom_kids | child_male, data = nfhs5)
coeftest(model10, vcov = vcovHC(model10, group = "psu_id"))
library(AER)
model10 <- ivreg(mom_working ~ mom_kids | child_male, data = nfhs5)
summary(model10)
coeftest(model10, vcov = vcovHC(model10, group = "psu_id"))
coeftest(model10, vcov = vcovHC(model10, type="HC2"))
coeftest(model10, vcov = vcovHC(model10))
rm("model10")
ivreg(mom_working ~ mom_kids | child_male, data = nfhs5)
model10 <- ivreg(mom_working ~ mom_kids | child_male, data = nfhs5)
coeftest(model10)
summary(model10)
coeftest(model10, vcov = vcovHC)
library(sandwich)
coeftest(model10, vcov = vcovHC)
model10 <- ivreg(mom_working ~ mom_kids | child_male, data = nfhs5)
coeftest(model10, vcov)
coeftest(model10, vcov = vcovCL, cluster = ~ psu_id)
nfhs5 <- read_dta("https://github.com/tvogl/econ121/raw/main/data/nfhs5.dta")
# Part A
# A1
# A linear probability model is estimated by OLS. We cluster at the PSU level
# because of the clustered sampling design. We use lm_robust().
model1 <- lm_robust(child_u1death ~ child_bord, data = nfhs5, clusters = psu_id, se_type = "stata")
summary(model1)
# For the bootstrap, we re-estimate the model using ols() and then use bootcov().
model1a <- ols(child_u1death ~ child_bord, data = nfhs5, x=TRUE, y=TRUE)
bootcov(model1a,cluster=nfhs5$psu_id,B=99)
# A2
# An increase of birth order by 1 is associated with a .2 percentage point
# increase in the probability of dying before age 1. The p-value is 0.000, so
# the coefficient is significantly different from 0.
# A3
# The odds ratio would be greater than 1 because the linear probability model
# indicates that higher birth orders are associated with higher mortality risk.
# That means the logit coefficient is likely to be positive. The odds ratio is the
# exponentiated logit coefficient, and the exponential of a positive number is
# greater than 1.
# A4
model2 <- plm(child_u1death ~ child_bord, data = nfhs5, index = c("mom_id"), model = "within")
coeftest(model2, vcov = vcovCL, cluster = ~ psu_id)
nfhs5 <- subset(nfhs5, child_bord==1)
model10 <- ivreg(mom_working ~ mom_kids | child_male, data = nfhs5)
coeftest(model10, vcov = vcovCL, cluster = ~ psu_id)
model11 <- glm(child_male ~ mom_rural + mom_edyrs + child_birthyr + mom_age, data = nhis, family=binomial(link="probit"))
model11 <- glm(child_male ~ mom_rural + mom_edyrs + child_birthyr + mom_age, data = nfhs5, family=binomial(link="probit"))
coeftest(model11, vcov = vcovHC(model11, group = "psu_id")) # This did not work for me
coeftest(model11, vcov = vcovCL, cluster = ~ psu_id)
probitmfx(child_male ~ mom_rural + mom_edyrs + child_birthyr + mom_age, data = nfhs5, atmean = TRUE, robust = TRUE, clustervar1 = psu_id)
library(mfx)
probitmfx(child_male ~ mom_rural + mom_edyrs + child_birthyr + mom_age, data = nfhs5, atmean = TRUE, robust = TRUE, clustervar1 = psu_id)
probitmfx(child_male ~ mom_rural + mom_edyrs + child_birthyr + mom_age, data = nfhs5, atmean = TRUE, robust = TRUE, clustervar1 = "psu_id")
probitmfx(child_male ~ mom_rural + mom_edyrs + child_birthyr + mom_age, data = nfhs5, atmean = TRUE, robust = TRUE)
probitmfx(child_male ~ mom_rural + mom_edyrs + child_birthyr + mom_age, data = nfhs5, atmean = TRUE, robust = TRUE, clustervar1 = "psu_id")
summary(nfhd5$child_bord)
summary(nfhs5$child_bord)
library(dplyr)
help by_group
help("group_by")
x <- c(5, 1, 3, 2, 2)
y <- c(400, 100, 300, 150, 200)
df <- tibble(
x = c(5, 1, 3, 2, 2),
y = c(400, 100, 300, 150, 200)
)
View(df)
plot(df$x,df$y)
View(df)
library(dplyr) # for group_by()
df <- tibble(
x = c(1, 2, 2, 2, 2, 3, 4, 5),
y = c(1, 1, 2, 3, 4, 1, 1, 1)
)
df %>% group_by(x) %>% filter(row_number==1)
df %>% group_by(x) %>% filter(row_number()==1)
df <- tibble(
x = c(1, 2, 2, 2, 2, 3, 4, 5),
y = c(1, 1, 2, 3, 4, 1, 1, 1),
z = c(100,200, 230, 190, 195, 300, 400, 500)
)
df %>% group_by(x) %>% filter(row_number()==1)
rm(df)
rm(c("x", "y"))
rm("x", "y")
library(starwars)
starwars
iris
iris %>% group_by(Species) %>% summarise(mean_length = mean(Sepal.Length))
starwars
starwars %>% group_by(species) %>% summarise(mean_height = mean(height)
)
starwars %>% group_by(species, gender) %>% summarise(mean_height = mean(height))
starwars %>% group_by(species) %>% summarise(mean_height = mean(height))
install.packages("TeachingDemos") # comment out this line after you install it
library(TeachingDemos)
getwd()
setwd("/Users/tvogl/Dropbox")
getwd()
data()
install.packages("gapminder")
library("gapminder") # load gapminder data
summary(gapminder)
lm(lifeExp ~ ln(gdpPercap/pop) + factor(country) + factor(year),
data = gapminder)
lm(lifeExp ~ log(gdpPercap/pop) + factor(country) + factor(year),
data = gapminder)
model <- lm(lifeExp ~ log(gdpPercap/pop) + factor(country) + factor(year),
data = gapminder)
summary(model)
model <- lm(lifeExp ~ log(gdpPercap/pop) + factor(year),
data = gapminder)
summary(model)
rm(model)
# uncomment to install TeachingDemos package
# install.packages("TeachingDemos")
# load TeachingDemos package for saving a log file
library(TeachingDemos)
# show your working directory
getwd()
# the log file will save there unless you uncomment and modify the next line
# setwd(" ")
# start log file
txtStart("mylogfile.log")
# main code
library("gapminder") # load gapminder data
summary(gapminder)
model <- lm(lifeExp ~ log(gdpPercap/pop) + factor(year),
data = gapminder)
summary(model)
# close log file
txtStop()
# uncomment to install TeachingDemos package
# install.packages("TeachingDemos")
# load TeachingDemos package for saving a log file
library(TeachingDemos)
# show your working directory
getwd()
# the log file will save there unless you uncomment and modify the next line
# setwd(" ")
# start log file
txtStart("mylogfile.log")
# main code
# PROBLEM 1
library("gapminder") # load gapminder data
summary(gapminder)
model <- lm(lifeExp ~ log(gdpPercap/pop) + factor(year),
data = gapminder)
summary(model)
# close log file
txtStop()
sdc_log("Users/tvogl/r_script", destination, replace = FALSE, append = FALSE, local = FALSE)
install.packages("sdc_log")
install.packages("sdcLog")
library("sdcLog")
sdc_log("Users/tvogl/Dropbox/courses/econ121/github/econ121/examples/cps_nonparametric", "logfile.log", replace = TRUE, append = FALSE, local = FALSE)
getwd()
setwd("Users/tvogl/Dropbox/courses/econ121/github/econ121/examples")
sdc_log("courses/econ121/github/econ121/examples/cps_nonparametric", "logfile.log", replace = TRUE, append = FALSE, local = FALSE)
getwd()
setwd("courses")
setwd("econ121/github/econ121/examples")
sdc_log("ccps_nonparametric", "logfile.log", replace = TRUE, append = FALSE, local = FALSE)
sdc_log("cps_nonparametric", "logfile.log", replace = TRUE, append = FALSE, local = FALSE)
getwd()
sdc_log("cps_nonparametric.R", "logfile.log", replace = TRUE, append = FALSE, local = FALSE)
# this script studies the relationship or gender, race, and age
# with income in the united states, using the current population
# survey. it relies on nonparametric estimators.
# I will focus only on Black-white and male-female differences.
# input Stata file
library(haven)
cps18_raw <- read_dta("https://github.com/tvogl/econ121/raw/main/data/cps_18.dta")
summary(cps18_raw)
# tables of race and sex - note: Stata labels have been removed
table(cps18_raw$race) #100 is white, 200 is black
table(cps18_raw$sex) #1 is male, 2 is female
# from the summary() results above, we know incwage has many 0s.
# over 25% of sample has 0s! restrict to workers who work 40+ hrs/wk
# with positive income. since we are just analyzing black/white diffs
# drop all other racial categories.
table(cps18$uhrsworkt) #997 and 999 are top codes
cps18 <- cps18_raw[which(cps18_raw$uhrsworkt >= 40 & cps18_raw$uhrsworkt <= 170 &
cps18_raw$incwage>0 & cps18_raw$race<=200),]
# cps18 is our analysis dataset, excluding people who work < 40 hours and
# people who are missing hours data.
# generate log income
cps18$lninc <- log(cps18$incwage)
# what is the sd of lninc?
sd(cps18$lninc)
# for the kernel density estimation, we can rely on elegant ggplot
# syntax, which allows us to estimate by race/sex category.
# first, let's create a single race/sex variable:
cps18$racesex <- as.factor(ifelse(cps18$race == 200 & cps18$sex == 2, 'Black women',
ifelse(cps18$race == 100 & cps18$sex == 2, 'White women',
ifelse(cps18$race == 200 & cps18$sex == 1, 'Black men',
ifelse(cps18$race == 100 & cps18$sex == 1, 'White men', 'Other')))))
# kernel density estimates of log income by race and sex
# let's use .2 as the bandwidth, about a quarter of the sd of lninc.
library(tidyverse)
ggplot(data=cps18, aes(x=lninc, group=racesex, fill=racesex)) +
geom_density(bw=.2,alpha=.4) #alpha specifies the transparency of the colors
# now let's try a bandwidth of .1 -> higher variance but more detail
ggplot(data=cps18, aes(x=lninc, group=racesex, fill=racesex)) +
geom_density(bw=.1,alpha=.4)
# for local linear regression, our syntax will be less elegant,
# since ggplot does not have a local linear regression function.
# many analysts use geom_smooth() from ggplot2 to smooth data,
# but it is not local linear regression. we will use the locpoly()
# function from the KernSmooth package. we will need to estimate
# four local linear regressions separately and then plot them
# using ggplot.
# first, generate log income in four separate data frames, for each
# race/gender group. drop obs with 0 income, to avoid missing data issues.
whitemen <- subset(cps18, race==100 & sex==1, select=c(age, lninc))
whitewomen <- subset(cps18, race==100 & sex==2, select=c(age, lninc))
blackmen <- subset(cps18, race==200 & sex==1, select=c(age, lninc))
blackwomen <- subset(cps18, race==200 & sex==2, select=c(age, lninc))
# now let's track racial differences in log wages over the lifecycle
# using local linear regression. set the degree to 1 because we are
# estimating a local LINEAR regression (not quadratic, cubic, etc.).
# and start with a bandwidth of 1 year of age.
library(KernSmooth)
wm <- data.frame(locpoly(x=whitemen$age, y=whitemen$lninc, bandwidth=1, degree=1))
ww <- data.frame(locpoly(x=whitewomen$age, y=whitewomen$lninc, bandwidth=1, degree=1))
bm <- data.frame(locpoly(x=blackmen$age, y=blackmen$lninc, bandwidth=1, degree=1))
bw <- data.frame(locpoly(x=blackwomen$age, y=blackwomen$lninc, bandwidth=1, degree=1))
ggplot() +
geom_line(data = wm, aes(x = x, y = y,color = "WM")) +
geom_line(data = ww, aes(x = x, y = y,color = "WW")) +
geom_line(data = bm, aes(x = x, y = y,color = "BM")) +
geom_line(data = bw, aes(x = x, y = y,color = "BW")) +
labs(x="age", y="lninc", color = "Legend") +
scale_color_manual(values = c("WM" = "blue", "WW" = "red","BM" = "black", "BW" = "grey"))
# what happens if we expand the bandwidth to 2 years? smoother curves.
wm <- data.frame(locpoly(x=whitemen$age, y=whitemen$lninc, bandwidth=1, degree=2))
ww <- data.frame(locpoly(x=whitewomen$age, y=whitewomen$lninc, bandwidth=1, degree=2))
bm <- data.frame(locpoly(x=blackmen$age, y=blackmen$lninc, bandwidth=1, degree=2))
bw <- data.frame(locpoly(x=blackwomen$age, y=blackwomen$lninc, bandwidth=1, degree=2))
ggplot() +
geom_line(data = wm, aes(x = x, y = y,color = "WM")) +
geom_line(data = ww, aes(x = x, y = y,color = "WW")) +
geom_line(data = bm, aes(x = x, y = y,color = "BM")) +
geom_line(data = bw, aes(x = x, y = y,color = "BW")) +
labs(x="age", y="lninc", color = "Legend") +
scale_color_manual(values = c("WM" = "blue", "WW" = "red","BM" = "black", "BW" = "grey"))
library(haven)
cps <- haven::read_dta("https://github.com/tvogl/econ121/raw/main/data/cps_18.dta")
cps18 <- cps18_raw[which(cps18_raw$uhrsworkt >= 40 & cps18_raw$uhrsworkt <= 170 &
cps18_raw$incwage>0 & cps18_raw$race<=200),]
cps18$lninc <- log(cps18$incwage)
cps18$lninc <- log(cps18$incwage)
cps18$racesex <- as.factor(ifelse(cps18$race == 200 & cps18$sex == 2, 'Black women',
ifelse(cps18$race == 100 & cps18$sex == 2, 'White women',
ifelse(cps18$race == 200 & cps18$sex == 1, 'Black men',
ifelse(cps18$race == 100 & cps18$sex == 1, 'White men', 'Other')))))
View(cps)
View(model)
rm(ls())
rm(list=ls())
cps18 <- cps18_raw[which(cps18_raw$uhrsworkt >= 40 & cps18_raw$uhrsworkt <= 170 &
cps18_raw$incwage>0 & cps18_raw$race<=200),]
library(haven)
cps <- haven::read_dta("https://github.com/tvogl/econ121/raw/main/data/cps_18.dta")
rm(cps)
library(haven)
cps_raw <- haven::read_dta("https://github.com/tvogl/econ121/raw/main/data/cps_18.dta")
cps18 <- cps18_raw[which(cps18_raw$uhrsworkt >= 40 & cps18_raw$uhrsworkt <= 170 &
cps18_raw$incwage>0 & cps18_raw$race<=200),]
rm(cps_raw)
library(haven)
cps18_raw <- haven::read_dta("https://github.com/tvogl/econ121/raw/main/data/cps_18.dta")
cps18 <- cps18_raw[which(cps18_raw$uhrsworkt >= 40 & cps18_raw$uhrsworkt <= 170 &
cps18_raw$incwage>0 & cps18_raw$race<=200),]
cps18$lninc <- log(cps18$incwage)
cps18$racesex <- as.factor(ifelse(cps18$race == 200 & cps18$sex == 2, 'Black women',
ifelse(cps18$race == 100 & cps18$sex == 2, 'White women',
ifelse(cps18$race == 200 & cps18$sex == 1, 'Black men',
ifelse(cps18$race == 100 & cps18$sex == 1, 'White men', 'Other')))))
cps18 %>% by_group(racesex) %>% summarise(mean.earn = mean(incwage))
cps18 %>% group_by(racesex) %>% summarise(mean.earn = mean(incwage))
cps18 %>% group_by(racesex) %>% summarise(mean.earn = mean(incwage))
model <- lm(incwage ~ racesex, data = cps18)
summary(model)
model <- lm(incwage ~ racesex, data = cps18)
summary(model)
library(dplyr)
cps18 %>% group_by(racesex) %>% summarise(mean.earn = mean(incwage))
model <- lm(incwage ~ racesex, data = cps18)
summary(mod)
